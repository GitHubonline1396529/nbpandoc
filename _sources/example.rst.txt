Usage
-----

To convert a Jupyter Notebook file into PDF, you can use:

.. code-block::

   nbpandoc <filename>.ipynb

.. warning::

  Before running the command, make sure that Pandoc is correctly installed and 
  included in your system's ``PATH``. You can verify this by running:

  .. code-block:: bash

    pandoc --version

  If Pandoc is not installed, refer to the official Pandoc documentation for 
  `installation instructions <https://pandoc.org/installing.html>`_.

Flags of ``pandoc`` command can be assigned in the metadata of the Notebook. See
:ref:`Examples` for more details.

.. note::

   The ``--help`` option can be used to display a list of available commands 
   and their descriptions.
 
   .. code-block:: text
                                                                                               
      usage: nbpandoc.exe [-h] [--flags FLAGS] filename
      
      Convert a Markdown or Jupyter notebook file to PDF via Pandoc, including
      full notebook metadata and custom pandoc_args.
      
      positional arguments:
        filename       The input file to convert (.md or .ipynb).
      
      optional arguments:
        -h, --help     show this help message and exit
        --flags FLAGS  Extra Pandoc flags (default: --pdf-engine=xelatex).

Examples
--------

.. _Examples:

Specify Export Format in Jupyter Metadata
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the end of a typical ``*.ipynb`` file, you will find a ``"metadata"`` section
written in JSON. If left unedited, this section retains its default style, 
automatically generated by Jupyter. It may look like the following:

.. code-block:: json
   :linenos:
  
   "metadata": {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.10"
     }
   }
   
When using this script, you can customize the export format by adding or 
modifying metadata fields such as ``title`` and ``author`` in the Jupyter 
Notebook's metadata.

.. note::

   To edit the metadata of a Jupyter Notebook file, you can:
  
   1. Use the Jupyter interface by clicking the ``Edit`` tab and selecting 
      ``Edit Notebook Metadata`` from the menu. 
   2. Open the notebook in a plain text editor, scroll to the bottom, and locate
      the ``"metadata"`` key in the JSON text.

Here is an example of customized metadata:

.. code-block:: json
   :linenos:
   
   "metadata": {
      // ...
      "documentclass": "article",
      "classoption": ["11pt", "a4paper"],
      "geometry": "margin=1in",
      "title": "The Document Title",
      "author": ["Author A", "Author B"]
      // ...
   }

Specify Extra Pandoc Options in Command Line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `--flags` option allows you to pass additional arguments directly to Pandoc.
This gives you fine-grained control over how your document is processed and
converted.

For example, you can specify a custom PDF engine, enable specific extensions, or
adjust formatting options. This is particularly useful when you need to
customize the output to meet specific requirements.

Use the following command to convert:

.. code-block:: bash

   nbpandoc --flags="--pdf-engine=lualatex" document.ipynb

In this example:

* ``--pdf-engine=lualatex`` tells Pandoc to use the ``lualatex`` engine for
* generating PDF files. This is helpful if you need advanced typesetting 
  features or compatibility with certain LaTeX packages.

You can replace ``--pdf-engine=lualatex`` with other Pandoc options depending on
your needs. For instance:

* ``--toc`` adds a table of contents to the output.
* ``--highlight-style=pygments`` specifies a syntax highlighting style for code 
  blocks.
* `--metadata=title:"My Document"` sets metadata like the document title.

By combining multiple options in the ``--flags`` argument, you can fully 
customize the conversion process. For example:

.. code-block:: bash

   nbpandoc --flags="--toc --pdf-engine=xelatex --metadata=author:'John Doe'" \
   document.ipynb

This command generates a PDF with a table of contents, uses the ``xelatex`` 
engine, and sets the author metadata to "John Doe".

Specify Pandoc Options in Notebook Metadata
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also specify Pandoc options directly in the Notebook's metadata. This
approach allows you to define advanced configurations without needing to pass
them as command-line arguments.

For example, you can add the following to the metadata section of your Jupyter
Notebook:

.. code-block:: json
   :linenos:
 
   "metadata": {
      "pandoc_args": {
         "shift_heading_level_by": -1,
         "lua_filter": ["callout2latex.lua", "default_table_width.lua"]
      }
   }

This configuration will automatically include the specified options when the
Notebook is converted. The resulting Pandoc command will include the following
lines:

.. code-block:: bash
   
   pandoc <...> \
   --shift-heading-level-by=-1 \
   --lua-filter=callout2latex.lua \
   --lua-filter=default_table_width.lua

Note:

* The ``shift_heading_level_by`` option adjusts the heading levels in the
  document. For example, a level-2 heading becomes level-1.
* The ``lua_filter`` option applies Lua filters to customize the conversion
  process. In this example, the filters ``callout2latex.lua`` and
  ``default_table_width.lua`` are applied.

If the ``"output"`` field is not specified in ``"pandoc_args"``, the default
behavior is to convert the Jupyter Notebook to a PDF file.

A Demo File
~~~~~~~~~~~

You can find the demo file ``intro.ipynb`` and ``intro.pdf`` in the ``example/``
folder. ``intro.ipynb`` is a Jupyter Notebook file, and ``intro.pdf`` is the 
converted PDF.

Here's the link to file.

* `The Jupyter Notebook <example/intro.ipynb>`_.
* `Exported PDF file <example/intro.pdf>`_.

.. caution::

   The ``intro.ipynb`` file is migrated from JupyterLite, licensed under the 
   terms of the BSD 3-Clause License. Please ensure compliance with the license 
   terms when using or distributing this file. 
   
   The original version of this file include some Emoji characters, I removed 
   them for converting this file to PDF via LaTeX. You can clicking `this link
   <https://github.com/jupyterlite/jupyterlite/blob/main/examples/intro.ipynb>`_
   to visit the original file.